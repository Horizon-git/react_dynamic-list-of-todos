{"version":3,"sources":["types/Filter.ts","TodoProvider.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Filter","TodosContext","React","createContext","todos","setTodos","query","setQuery","filterType","ALL","setFilterType","filteredItems","selectedTodo","setSelectedTodo","TodoProvider","children","useState","useMemo","filtered","filter","todo","COMPLETED","completed","ACTIVE","title","toLowerCase","includes","value","Provider","TodoList","useContext","className","map","id","classNames","type","onClick","TodoFilter","onChange","event","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","isLoading","setIsLoading","user","setUser","useEffect","userId","finally","href","email","name","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72d01684.chunk.js","sourcesContent":["export enum Filter {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React, { useMemo, useState } from 'react';\nimport { Filter } from './types/Filter';\nimport { Todo } from './types/Todo';\n\ntype ContextProps = {\n  todos: Todo[],\n  setTodos: (newTodos: Todo[]) => void,\n  query: string,\n  setQuery: (newQuery: string) => void,\n  filterType: Filter,\n  setFilterType: (newType: Filter) => void,\n  filteredItems: Todo[],\n  selectedTodo: Todo | null,\n  setSelectedTodo: (newTodo: Todo | null) => void,\n};\n\nexport const TodosContext = React.createContext<ContextProps>({\n  todos: [],\n  setTodos: () => {},\n  query: '',\n  setQuery: () => {},\n  filterType: Filter.ALL,\n  setFilterType: () => {},\n  filteredItems: [],\n  selectedTodo: null,\n  setSelectedTodo: () => {},\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const TodoProvider: React.FC<Props> = ({ children }) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filterType, setFilterType] = useState<Filter>(Filter.ALL);\n  const [query, setQuery] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  const filteredItems = useMemo(() => {\n    let filtered = todos.filter((todo) => {\n      switch (filterType) {\n        case Filter.COMPLETED:\n          return todo.completed;\n        case Filter.ACTIVE:\n          return !todo.completed;\n        default:\n          return true;\n      }\n    });\n\n    if (query) {\n      filtered = filtered.filter(\n        (todo) => todo.title.toLowerCase().includes(query.toLowerCase()),\n      );\n    }\n\n    return filtered;\n  }, [todos, filterType, query]);\n\n  const value = useMemo(() => ({\n    todos,\n    setTodos,\n    query,\n    setQuery,\n    filterType,\n    setFilterType,\n    filteredItems,\n    selectedTodo,\n    setSelectedTodo,\n  }), [todos, filterType, query, selectedTodo]);\n\n  return (\n    <TodosContext.Provider value={value}>\n      {children}\n    </TodosContext.Provider>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport { TodosContext } from '../../TodoProvider';\n\nexport const TodoList: React.FC = () => {\n  const {\n    filteredItems,\n    setSelectedTodo,\n    selectedTodo,\n  } = useContext(TodosContext);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredItems.map((todo) => (\n          <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => setSelectedTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classNames('far', {\n                      'fa-eye':\n                        selectedTodo === null || selectedTodo.id !== todo.id,\n                      'fa-eye-slash':\n                        selectedTodo !== null && selectedTodo.id === todo.id,\n                    })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useContext } from 'react';\nimport { TodosContext } from '../../TodoProvider';\nimport { Filter } from '../../types/Filter';\n\nexport const TodoFilter: React.FC = () => {\n  const {\n    filterType,\n    setFilterType,\n    query,\n    setQuery,\n  } = useContext(TodosContext);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterType}\n            onChange={(event) => setFilterType(event.target.value as Filter)}\n          >\n            <option value={Filter.ALL}>All</option>\n            <option value={Filter.ACTIVE}>Active</option>\n            <option value={Filter.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\r\nimport './Loader.scss';\r\n\r\nexport const Loader: React.FC = () => (\r\n  <div className=\"Loader\" data-cy=\"loader\">\r\n    <div className=\"Loader__content\" />\r\n  </div>\r\n);\r\n","import React, { useContext, useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { TodosContext } from '../../TodoProvider';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const {\n    selectedTodo,\n    setSelectedTodo,\n  } = useContext(TodosContext);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(setUser)\n        .finally(() => setIsLoading(false));\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className=\"has-text-danger\">Planned</strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useContext, useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { TodosContext } from './TodoProvider';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const { setTodos, selectedTodo } = useContext(TodosContext);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? <Loader /> : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { TodoProvider } from './TodoProvider';\n\nReactDOM.render(\n  <TodoProvider>\n    <App />\n  </TodoProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}